#! /bin/sh
# postinst script for kwdjbdns-update
#
# see: dh_installdeb(1)

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package
#
# quoting from the policy:
#     Any necessary prompting should almost always be confined to the
#     post-installation script, and should be protected with a conditional
#     so that unnecessary prompting doesn't happen if a package's
#     installation fails and the `postinst' is called with `abort-upgrade',
#     `abort-remove' or `abort-deconfigure'.

case "$1" in
	configure)
		# debconf Bibliothek einlesen
		. /usr/share/debconf/confmodule
		db_version 2.0
		#
		if [ -x "`which invoke-rc.d 2>/dev/null`" ]; then
			Init_Script="invoke-rc.d kwdjbdns-update"
		else
			Init_Script="/etc/init.d/kwdjbdns-update"
		fi
		#
		#db_input medium kwtools-net-djbdns-update/domain || true
		#db_go
		#
		# read conf file 
		CONFFILE=/etc/kwdjbdns-update.cf
		if [ -f "$CONFFILE" ] ; then
			egrep -v '^[[:space:]]*(#|$)' "$CONFFILE"  | \
			awk '{print $1,$3}' | \
			while read Var Value ; do
			   	case $Var in
					domain_name)
					   	DOMAINNAME=$Value ;;
				   	lease_file)
					   	DHCPDLEASEFILE=$Value ;;
				   	tinydnspath)
					   	TINYDNS_PATH=$Value ;;
				   	update_freq)
					   	FREQ=$Value ;;
				   	debug)
					   	DEBUG=$Value ;;
			   	esac
			done
		fi

		db_get kwdjbdns-update/domain $DOMAINNAME || RET="false"
		if [ "$RET" != "false" ] ; then
			domain_name="$RET"
		else
			domain_name="`hostname -d`"
		fi

		db_get kwdjbdns-update/leasefile $DHCPDLEASEFILE || RET="false"
		if [ "$RET" != "false" ] ; then
			lease_file="$RET"
		fi

		db_get kwdjbdns-update/tinydns_path $TINYDNS_PATH || RET="false"
		if [ "$RET" != "false" ] ; then
			if [ -d "$RET/root" ] ; then
				tinydnspath="$RET"
			fi
		fi

		db_get kwdjbdns-update/frequenz $FREQ || RET="false"
		if [ "$RET" != "false" ] ; then
			update_freq=$RET
		else
			update_freq=30
		fi

		db_get kwdjbdns-update/debug || RET="false"
		if [ "$RET" != "false" ] ; then
			debug=2
		else
			debug=0
		fi

		# write conffile and Makefile
		cat > $CONFFILE << EOF
# Begin /etc/kwdjbdns-update.cf
#
############## DEBIAN ################
### DO NOT EDIT THIS FILE DIRECTLY ###
###      CREATE FROM DEBCONF       ###
######################################

# Domain
domain_name = "$domain_name"

# dhcpd.lease file
lease_file = "$lease_file"

# Path zu tinydns
tinydnspath = "$tinydnspath"

# dhcp tinydns file
dhcp_dnsfile = \$tinydnspath/root/dhcp.\$domain_name

# staic tinydns file
static_dnsfile = \$tinydnspath/root/static.\$domain_name

# Intervall
update_freq = $update_freq

# debug messages (yes/no)?
debug = $debug

# End /etc/kwdjbdns-update.cf
EOF
		# Funktion zur Meldung das tinydns nicht richtig
		# konfiguriert ist bzw. nicht existiert.
		no_conf_tinydns() {
			echo ""
			echo "Warning: tinydns not correct configured or not found."
			echo "         Please to correct this and to execute"
			echo "         dpkg-reconfigure kwdjbdns-update."
			echo ""
		}

		if [ -d "$tinydnspath" ] ; then
			# Variablen
			MAKEFILE=${tinydnspath}/root/Makefile
			DATA_CDB=${tinydnspath}/root/data.cdb
			STATIC_DNS_FILE="${tinydnspath}/root/static.${domain_name}"
			# Falls static_dnsfile nicht existiert data.cdb danach kopieren
			if [ -e "$DATA_CDB" ] ; then
				if [ ! -e "$STATIC_DNS_FILE" ] ; then
					echo ""
					echo "Copy $DATA_CDB to $STATIC_DNS_FILE"
					echo ""
					cp -a $DATA_CDB $STATIC_DNS_FILE &>/dev/null
				fi
				# Original Makefile nach Makefile.orig verschieben
				if ! grep -q static $MAKEFILE ; then
					echo ""
					echo "Move $MAKEFILE to ${MAKEFILE}.orig"
					echo ""
					mv $MAKEFILE ${MAKEFILE}.orig &>/dev/null
				fi
			else
				no_conf_tinydns
			fi

			if [ ! -f $MAKEFILE ] ; then
		
				cat > $MAKEFILE << EOF
.cdb: data
	/usr/bin/tinydns-data
	/usr/bin/svc -h $tinydnspath

db.$domain_name: static.$domain_name dhcp.$domain_name
	@echo "# DO NOT EDIT THIS FILE DIRECTLY" > db.$domain_name
	cat static.$domain_name dhcp.$domain_name >> db.$domain_name
								
data: db.$domain_name
	@echo "# DO NOT EDIT THIS FILE DIRECTLY" > data
	cat db.$domain_name >> data
EOF
				RETURN=0
			else
				RETURN=1
			fi
		else
			no_conf_tinydns
		fi

		if [ $RETURN = 0 ] ; then
			db_get kwdjbdns-update/boot || RET="false"
			if [ "$RET" = "true" ] ; then
				# Runlevel Symlinks erstellen
				update-rc.d kwdjbdns-update defaults 40 40 >/dev/null
				#
				if [ -f /var/run/kwdjbdns-update.pid ] ; then
					$Init_Script restart
				else
					$Init_Script start
				fi
			else
				if [ -f /var/run/kwdjbdns-update.pid ] ; then
					$Init_Script stop
				fi
				# Runlevel Symlinks entfernen
				update-rc.d -f kwdjbdns-update remove >/dev/null
			fi
			db_stop
			exit 0
		else
			no_conf_tinydns
		fi
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)

    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0


